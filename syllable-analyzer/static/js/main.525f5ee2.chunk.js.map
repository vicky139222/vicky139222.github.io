{"version":3,"sources":["checker.js","keyboard.js","App.js","reportWebVitals.js","index.js"],"names":["sonority","stop","fricative","affricate","nasal","vowel","keyboard","concat","sonority_dict","segment_to_sonority","dict","i","length","l","get_indexes","segment_list","res","s","push","Keyboard","props","rows","slice","Math","min","text","this","onKeyClicked","Paper","elevation","style","map","row","item","className","onClick","onKeyboardClick","React","Component","linearMap","inRangeStart","inRangeEnd","outRangeStart","outRangeEnd","value","ipaSet","result","Set","forEach","ipa","add","theme","createMuiTheme","palette","type","AnalysisDescription","state","allowDiphthongs","split","fontWeight","marginRight","color","marginLeft","join","data","console","log","marginBottom","FormControlLabel","control","Checkbox","checked","onChange","e","setState","target","name","label","renderSplit","App","showResults","errorMessage","parsedInputToDraw","parsedInput","parseInput","analysisData","getAnalysisData","input","ambiguity","syllable","splits","nucleusList","lastNucleusStart","index","start","end","getWithAmbiguityResolved","every","pop","segments","found","j","has","indices","syllables","indexes","prev","rise","rise_idx","next","idx","falling","falling_id","foundN","lastSpecial","get_syllables","canvas","refs","margin","yDrawRegion","syllableToColor","backgroundColor","pointData","x","y","width","height","ctx","getContext","fillStyle","fillRect","strokeStyle","strokeRect","textAlign","textBaseline","font","fillText","beginPath","moveTo","lineTo","stroke","clearSize","setLineDash","labelY","ThemeProvider","ref","Button","variant","backToSearch","TextField","onKeyPress","charCode","onSearch","changeText","disabled","onKeyboardClicked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gWAAaA,EAAW,CAAE,WAAY,QAAS,SAAU,QAAS,SAE5DC,EAAO,CAAC,IAAI,IAAI,IAAI,IAAK,SAAK,SAAK,IAAK,SAAK,IAAK,SAAK,IAAK,SAAK,UACjEC,EAAY,CAAC,SAAI,SAAI,IAAI,IAAI,SAAK,OAAK,IAAK,IAAK,SAAK,SAAI,SAAI,OAAK,IAAK,SAAK,SAAK,SAAK,KACvFC,EAAY,CAAC,WAAO,WAAO,gBAAO,gBAAO,qBAAO,cAAO,sBACvDC,EAAQ,CAAC,IAAK,IAAK,SAAK,SAAK,UAK7BC,EAAQ,CAAC,IAAI,IAAI,SAAI,SAAK,IAAK,SAAK,SAAK,IAAK,IAAK,SAAK,SAAK,SAAK,SAAK,OAAI,IAAK,UAEzEC,EAAWL,EAAKM,OAAOL,EAAWC,EAAWC,EAN7C,CAAC,SAAK,UACL,CAAC,KACC,CAAC,IAAK,SAAK,UACP,CAAC,IAAK,SAAK,SAAK,KAGgEC,GAE9FG,EAAgB,CAClB,MAAUH,EACV,MAAU,CAAC,IAAK,KAChB,OAAW,CAAC,SAAK,SAAK,IAAK,IAAK,SAAK,SAAK,SAAK,UAC/C,MAAUD,EACV,SAAaH,EAAKM,OAAOL,EAAWC,IAGlCM,EAAuB,WAEzB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAIX,EAASY,OAAQD,IAAK,CACtC,IADsC,EAElCE,EAAIL,EADAR,EAASW,IADqB,cAGtBE,GAHsB,IAGtC,2BAAkB,CACdH,EADc,SACFC,GAJsB,+BAO1C,OAAOD,EATkB,GAYtB,SAASI,EAAYC,GACxB,IADqC,EACjCC,EAAM,GAD2B,cAEvBD,GAFuB,IAErC,2BAA2B,CAAC,IAAnBE,EAAkB,QACvBD,EAAIE,KAAKT,EAAoBQ,KAHI,8BAKrC,OAAOD,E,aC9BEG,EAAb,kDAEI,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IACDC,KAAO,GAEZ,IADA,IAAIV,EAAI,EACDA,EAAIL,EAASM,QAChB,EAAKS,KAAKH,KAAKZ,EAASgB,MAAMX,EAAGY,KAAKC,IAAIb,EATtC,GASmDL,EAASM,UAChED,GAVI,GAIO,SAFvB,4DAYoBc,GACZC,KAAKN,MAAMO,aAAaF,KAbhC,+BAgBc,IAAD,OACL,OACA,cAACG,EAAA,EAAD,CAAOC,UAAU,IAAIC,MAAO,CAAC,MAAS,QAAS,UAAa,OAAQ,gBAAmB,WAAvF,SACQ,uBAAOA,MAAO,CAAC,MAAS,OAAQ,QAAW,OAAQ,YAAe,SAAlE,SACA,gCACCJ,KAAKL,KAAKU,KAAI,SAAAC,GACX,OACA,6BACCA,EAAID,KAAI,SAAAE,GACL,OACI,6BACA,qBAAKC,UAAU,kBAAkBC,QAAS,kBAAM,EAAKC,gBAAgBH,IAArE,SACKA,wBA5BjC,GAA8BI,IAAMC,W,kBCMpC,SAASC,EAAUC,EAAcC,EAAYC,EAAeC,EAAaC,GACvE,OAAOF,GAAiBE,EAAQJ,IAAiBG,EAAcD,IAAkBD,EAAaD,GAGhG,IAEMK,EAAU,WACZ,IAAMC,EAAS,IAAIC,IAEnB,OADAzC,EAAS0C,SAAQ,SAAAC,GAAQH,EAAOI,IAAID,MAC7BH,EAHK,GAMVK,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,UAIJC,E,kDAEF,WAAYnC,GAAQ,IAAD,8BACf,cAAMA,IACDoC,MAAQ,CACTC,iBAAiB,GAHN,E,wDAOPC,GACR,OAAQ,8BACA,sBAAM5B,MAAO,CAAC6B,WAAY,OAAQC,YAAa,MAAOC,MAAO,WAA7D,SAA0EH,EAAM9C,SAC/D,GAAhB8C,EAAM9C,OAAc,WAAa,YAFlC,IAGA,uBAAMkB,MAAO,CAACgC,WAAY,QAA1B,cAAqCJ,EAAMK,KAAK,KAAhD,Y,+BAIF,IAAD,OACCC,EAAOtC,KAAKN,MAAM4C,KAAKtC,KAAK8B,MAAMC,gBAAkB,iBAAmB,qBAI7E,OAFAQ,QAAQC,IAAIxC,KAAKN,MAAM4C,MAEf,sBAAKlC,MAAO,CAACqC,aAAc,QAA3B,UACJ,qBAAKrC,MAAO,CAAC6B,WAAY,OAAQQ,aAAc,QAA/C,SACI,cAACC,EAAA,EAAD,CACIC,QACA,cAACC,EAAA,EAAD,CACIC,QAAS7C,KAAK8B,MAAMC,gBACpBe,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACjB,gBAAiBgB,EAAEE,OAAOJ,WAC1DK,KAAK,WACLf,MAAM,YAGVgB,MAAM,uBAGE,GAAfb,EAAKpD,OACLc,KAAKoD,YAAYd,EAAK,IACtB,gCACG,qBAAK9B,UAAU,mBAAf,sDAGCR,KAAKoD,YAAYd,EAAK,IACvB,qBAAK9B,UAAU,mBAAf,qDAGCR,KAAKoD,YAAYd,EAAK,IACvB,qBAAK9B,UAAU,mBAAf,6G,GA/CkBG,IAAMC,WAgVzByC,E,kDAtRX,WAAY3D,GAAQ,IAAD,8BACf,cAAMA,IACDoC,MAAQ,CACT/B,KAAM,GACNuD,aAAa,EACbC,aAAc,MAElB,EAAKC,kBAAoB,KAPV,E,uDAURzD,GACPC,KAAKgD,SAAS,CAAEjD,KAAMA,M,wCAGRA,GACdC,KAAKgD,SAAS,CAAEjD,KAAMC,KAAK8B,MAAM/B,KAAOA,M,iCAIxC,IAAMA,EAAOC,KAAK8B,MAAM/B,KACxBC,KAAKgD,SAAS,CAAEM,aAAa,IAE7B,IAEMG,EAAczD,KAAK0D,WAAW3D,GAET,kBAAhB0D,EACPzD,KAAKgD,SAAS,CAAEO,aAAcE,KAE9BzD,KAAKgD,SAAS,CAAEO,aAAc,OAC9BvD,KAAKwD,kBAAoBC,EACzBzD,KAAK2D,aAAe3D,KAAK4D,gBAAgBH,M,+CAIxBI,EAAO5E,EAAG6E,GAC/B,IAAMvE,EAAIsE,EAAM5E,GAAG8E,SACnB,MAAY,KAALxE,EAAWuE,EAAYvE,I,sCAGlBsE,GAEZ,IADA,IAAMvB,EAAO,GACb,MAA4B,EAAC,GAAO,GAApC,eAA2C,CAEvC,IAFC,IAAIP,EAAe,KACdiC,EAAS,GACf,MAAsB,CAAC,IAAK,KAA5B,eAAkC,CAI9B,IAJC,IAAIF,EAAS,KACR9B,EAAQ,GACRiC,EAAc,GAChBC,GAAoB,EACfjF,EAAI,EAAGA,EAAI4E,EAAM3E,OAAQD,IAAK,CAAC,IAAD,EACH4E,EAAM5E,GAAlB8E,GADe,EAC5BhE,KAD4B,EACtBoE,MADsB,EACfJ,UACfhC,GAA+B,KAAZgC,GAChBG,GAAoB,IACpBD,EAAYzE,KAAK,CAAC0E,EAAkBjF,EAAI,IACxCiF,GAAoB,GAGZ,KAAZH,GACIG,EAAmB,IACnBA,EAAmBjF,GAI3BiF,GAAoB,GACpBD,EAAYzE,KAAK,CAAC0E,EAAkBL,EAAM3E,OAAS,IAGvD,IAAK,IAAID,EAAI,EAAGA,EAAIgF,EAAY/E,OAAQD,IAAK,CAAC,IAAD,cACtBgF,EAAYhF,GADU,GACpCmF,EADoC,KAC7BC,EAD6B,KAIzC,IAFAD,IACAC,IACOD,GAAS,GAA+D,KAA1DpE,KAAKsE,yBAAyBT,EAAOO,EAAON,IAC7DM,IACJ,KAAOC,EAAMR,EAAM3E,QAAkE,KAAxDc,KAAKsE,yBAAyBT,EAAOQ,EAAKP,IACnEO,IACJD,IACAC,IACArC,EAAMxC,KAAKqE,EAAMjE,MAAMwE,EAAOC,EAAM,GAAGhE,KAAI,SAAAE,GAAI,OAAIA,EAAKR,QAAMsC,KAAK,KAEvE2B,EAAOxE,KAAKwC,GAEZ6B,EAAMU,OAAM,SAAAhE,GAAI,MAAqB,KAAjBA,EAAKwD,aAAkBC,EAAOQ,MAEtDlC,EAAKP,EAAkB,iBAAmB,qBAAuBiC,EAErE,OAAO1B,I,iCAGAvC,GAGP,IAFA,IAAM0E,EAAW,GACbxF,EAAI,EACDA,EAAIc,EAAKb,QAAQ,CAEpB,IADA,IAAIwF,GAAQ,EACHC,EAAI9E,KAAKC,IApKL,EAoK2BC,EAAKb,OAASD,GAAI0F,GAAK,IAAKA,EAAG,CACnE,IAAM/E,EAAQG,EAAKH,MAAMX,EAAGA,EAAI0F,GAEhC,GADApC,QAAQC,IAAI5C,GACRuB,EAAOyD,IAAIhF,GAAQ,CACnB6E,EAASjF,KAAKI,GACdX,GAAK0F,EACLD,GAAQ,EACR,OAGR,IAAKA,EACD,MAAO,mCAGf,IAAMG,EAAUzF,EAAYqF,GACtBK,EF5JP,SAAuBzF,GAC1B,IADuC,EACnCC,EAAM,GAD6B,cAEzBD,GAFyB,IAEvC,2BAA2B,QACvBC,EAAIE,KAAK,KAH0B,8BAWvC,IANA,IAAIuF,EAAU3F,EAAYC,GACtB2F,GAAQ,EACR/F,EAAI,EACJgG,GAAO,EACPC,GAAY,EAETjG,EAAI8F,EAAQ7F,QAAO,CACtB,IAAIiG,EAAOlG,EAAI,EAAI8F,EAAQ7F,OAAS6F,EAAQ9F,EAAI,IAAM,EAElDmG,EAAML,EAAQ9F,GAClB,GAAImG,EAAMD,GAAQC,EAAMJ,EAAK,CACzB,GAAuB,KAAnB3F,EAAaJ,IAAgC,KAAnBI,EAAaJ,GACvC,MAAO,4DAEXK,EAAIL,GAAK,SAER,GAAGmG,EAAMJ,GAAQI,IAAQD,EAC1BF,GAAO,EACPC,EAAWjG,OAEV,GAAGgG,GAAQG,EAAMD,EAElB,IAAK,IAAIR,EADTO,GAAwB,GAAbA,EAAiBA,EAAW,EAChBP,EAAI1F,EAAI,EAAG0F,IAAI,CAClC,GAAuB,KAAnBtF,EAAaJ,IAAgC,KAAnBI,EAAaJ,GACvC,MAAO,4DAEXK,EAAIqF,GAAK,IAIbS,GAAOD,IACPF,GAAO,GAEXD,EAAOD,EAAQ9F,GACfA,GAAK,EAKTA,EAAI,EACJ,IAAIoG,GAAU,EACVC,GAAc,EAElB,IADAN,GAAQ,EACD/F,EAAI8F,EAAQ7F,QAAO,CACtB,IAAIiG,EAAOlG,EAAI,EAAI8F,EAAQ7F,OAAS6F,EAAQ9F,EAAI,IAAM,EAElDmG,EAAML,EAAQ9F,GAClB,GAAImG,EAAMD,GAAQC,EAAMJ,EACpB1F,EAAIL,GAAK,SAER,GAAGmG,EAAMJ,GAAQI,IAAQD,EAC1BE,GAAU,EACVC,EAAarG,OAEZ,GAAGmG,EAAMD,EACVE,GAAU,OAET,GAAGA,GAAWD,EAAMD,EAErB,IAAK,IAAIR,EADTW,GAA4B,GAAfA,EAAmBA,EAAa,EACpBX,EAAI1F,EAAI,EAAG0F,IAChCrF,EAAIqF,GAAK,IAGjBK,EAAOD,EAAQ9F,GACfA,GAAK,EAGTA,EAAI,EAIJ,IAHA,IAAIsG,GAAS,EACTC,EAAc,IAEZvG,EAAI8F,EAAQ7F,QACC,MAAXI,EAAIL,GAKa,MAAXK,EAAIL,GAMTsG,GAMc,KAAfC,GAMe,KAAfA,IACAlG,EAAIL,GAAK,KAKbA,GAAK,IAjBDK,EAAIL,GAAK,IACTA,GAAK,IAPLuG,EAAc,IACdvG,GAAK,IANLuG,EAAc,IACdD,GAAS,EACTtG,GAAK,GA8Bb,IADAA,EAAI,EACEA,EAAI8F,EAAQ7F,QAED,OADFD,EAAI,EAAI8F,EAAQ7F,OAASI,EAAIL,EAAI,GAAK,OAClB,MAAXK,EAAIL,KACpBK,EAAIL,GAAK,KAEbA,GAAK,EAIT,IADA,IAAI0F,EAAII,EAAQ7F,OAAS,EACnByF,GAAK,GACO,KAAVrF,EAAIqF,IAGRrF,EAAIqF,GAAK,IACTA,GAAK,EAGT,OAAOrF,EE6BemG,CAAchB,GAChC,GAAyB,kBAAdK,EAAwB,OAAOA,EAE1C,IADA,IAAM1D,EAAS,GACNnC,EAAI,EAAGA,EAAI4F,EAAQ3F,OAAQD,IAChCmC,EAAO5B,KAAK,CACRO,KAAM0E,EAASxF,GACfkF,MAAOU,EAAQ5F,GACf8E,SAAUe,EAAU7F,KAG5B,OAAOmC,I,2CAIP,GAAKpB,KAAKwD,kBAAV,CACA,IAAMK,EAAQ7D,KAAKwD,kBACnBxD,KAAKwD,kBAAoB,KAEzB,IAAMkC,EAAS1F,KAAK2F,KAAKD,OACzB,GAAKA,EAAL,CAeA,IAbA,IACME,EAAS,CAAC,IAAK,IACfC,EAAc,CAAC,GAAI,KAEnBC,EAAkB,CACpB,EAAK,UACL,EAAK,UACL,EAAK,UACL,IAAK,WAEHC,EAAkB,UAElBzD,EAAO,GACJrD,EAAI,EAAGA,EAAI4E,EAAM3E,OAAQD,IAAK,CACnC,IAAM+G,EAAYnC,EAAM5E,GAClBgH,EAAIL,EAAO,GAfA,IAeM3G,EAAI,IACrBiH,EAAIrF,EAAU,EAAG,EAAGgF,EAAY,GAAIA,EAAY,GAAIG,EAAU7B,OAC9DpE,EAAOiG,EAAUjG,KACjBR,EAAIyG,EAAUjC,SACpBzB,EAAK9C,KAAK,CAACyG,IAAGC,IAAGnG,OAAMR,MAG3BmG,EAAOS,MAtBc,GAsBStC,EAAM3E,OAAS0G,EAAO,GAAKA,EAAO,GAChEF,EAAOU,OAAS,IAChB,IAAMC,EAAMX,EAAOY,WAAW,MAC9BD,EAAIE,UAAYR,EAChBM,EAAIG,SAAS,EAAG,EAAGd,EAAOS,MAAOT,EAAOU,QAExCC,EAAII,YAAc,UAClBJ,EAAIK,WAAW,EAAG,EAAGhB,EAAOS,MAAOT,EAAOU,QAG1CC,EAAIM,UAAY,SAChBN,EAAIO,aAAe,SACnBP,EAAIQ,KAAO,aACX,IAAIZ,EAAUC,EAAI,KAClBG,EAAIE,UAAY,UAChBN,EAAIL,EAAO,GAAK,EAChBM,EAAIrF,EAAU,EAAG,EAAGgF,EAAY,GAAIA,EAAY,GAAI,GACpDQ,EAAIS,SAAS,YAAab,EAAGC,GAC7BA,EAAIrF,EAAU,EAAG,EAAGgF,EAAY,GAAIA,EAAY,GAAI,GACpDQ,EAAIS,SAAS,QAASb,EAAGC,GACzBA,EAAIrF,EAAU,EAAG,EAAGgF,EAAY,GAAIA,EAAY,GAAI,GACpDQ,EAAIS,SAAS,SAAUb,EAAGC,GAC1BA,EAAIrF,EAAU,EAAG,EAAGgF,EAAY,GAAIA,EAAY,GAAI,GACpDQ,EAAIS,SAAS,QAASb,EAAGC,GACzBA,EAAIrF,EAAU,EAAG,EAAGgF,EAAY,GAAIA,EAAY,GAAI,GACpDQ,EAAIS,SAAS,QAASb,EAAGC,GAEzBG,EAAIU,YACJV,EAAII,YAAc,UAClB,IAAK,IAAIxH,EAAI,EAAGA,EAAIqD,EAAKpD,SAAUD,EAAG,CAAC,IAAD,EACnBqD,EAAKrD,GAAbgH,EAD2B,EAC3BA,EAAGC,EADwB,EACxBA,EACD,GAALjH,EACAoH,EAAIW,OAAOf,EAAGC,GAEdG,EAAIY,OAAOhB,EAAGC,GAGtBG,EAAIa,SAEJb,EAAIQ,KAAO,kBACXR,EAAIM,UAAY,SAChBN,EAAIO,aAAe,SAEnB,IADA,IACS3H,EAAI,EAAGA,EAAIqD,EAAKpD,SAAUD,EAAG,CAAC,IAAD,EAChBqD,EAAKrD,GAAhBgH,EAD2B,EAC3BA,EAAGC,EADwB,EACxBA,EAAG3G,EADqB,EACrBA,EACb8G,EAAIE,UAAYR,EAChBM,EAAIG,SAASP,EAAIkB,EAAejB,EAAIiB,EAJtB,OAKdd,EAAIE,UAAYT,EAAgBvG,GAChC8G,EAAIS,SAASvH,EAAG0G,EAAGC,GAOvBG,EAAIE,UAAY,UAChBF,EAAIQ,KAAO,aACXR,EAAIM,UAAY,SAChBN,EAAIO,aAAe,MACnB,IAAK,IAAI3H,EAAI,EAAGA,EAAIqD,EAAKpD,SAAUD,EAAG,CAAC,IAAD,EACbqD,EAAKrD,GAAnBgH,EAD2B,EAC3BA,EAAGC,EADwB,EACxBA,EAAGnG,EADqB,EACrBA,KACbsG,EAAIS,SAAS/G,EAAMkG,EAhFR,KAkFXI,EAAIU,YACJV,EAAIe,YAAY,CAAC,EAAG,IACpBf,EAAIW,OAAOf,EAAGC,EAAI,IAClBG,EAAIY,OAAOhB,EAAGoB,KACdhB,EAAIa,c,qCAKRlH,KAAKgD,SAAS,CAAEM,aAAa,M,+BAGvB,IAAD,OACL,OACI,cAACgE,EAAA,EAAD,CAAe7F,MAAOA,EAAtB,SACA,sBAAKjB,UAAU,cAAf,UACA,wBAAQA,UAAU,aAAlB,SACI,qDAKJR,KAAK8B,MAAMwB,YACX,sBAAK9C,UAAU,cAAf,UACI,sBAAKA,UAAU,kBAAf,cACMR,KAAK8B,MAAM/B,KADjB,OAGCC,KAAK8B,MAAMyB,aAAe,qBAAK/C,UAAU,sBAAf,SACtBR,KAAK8B,MAAMyB,eAGZ,qCACA,wBAAQgE,IAAI,SAASpB,MAAO,IAAKC,OAAQ,IAAK5F,UAAU,WACnD,cAAC,EAAD,CAAqB8B,KAAMtC,KAAK2D,kBAIzC,cAAC6D,EAAA,EAAD,CAAQC,QAAQ,YACZhH,QAAS,WAAO,EAAKiH,gBADzB,qBAMJ,sBAAKlH,UAAU,cAAf,UACA,sBAAKA,UAAU,uBAAf,UACI,cAACmH,EAAA,EAAD,CAAWnH,UAAU,aAAa2C,MAAM,6BAA6BsE,QAAQ,WAC7EvG,MAAOlB,KAAK8B,MAAM/B,KAClB6H,WAAY,SAAC7E,GAA0B,KAAfA,EAAE8E,UAAiB,EAAKC,YAChDhF,SAAU,SAACC,GAAO,EAAKgF,WAAWhF,EAAEE,OAAO/B,UAC/C,cAACsG,EAAA,EAAD,CAAQC,QAAQ,YAAYrH,MAAO,CAAC,WAAc,OAAQ,OAAU,QAChE4H,UAAWhI,KAAK8B,MAAM/B,KACtBU,QAAS,WAAO,EAAKqH,YAFzB,SAGI,cAAC,IAAD,SAGJ,cAAC,EAAD,CAAU7H,aAAc,SAAC8C,GAAO,EAAKkF,kBAAkBlF,kB,GA9QjDpC,IAAMC,WC7ETsH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.525f5ee2.chunk.js","sourcesContent":["export const sonority = [ \"obstuent\", \"nasal\", \"liquid\", \"glide\", \"vowel\"]\n\nconst stop = [\"p\",\"b\",\"t\",\"d\", \"ʈ\", \"ɖ\", \"c\", \"ɟ\", \"k\", \"ɡ\", \"q\", \"ɢ\", \"ʔ\"]\nconst fricative = [\"ɸ\",\"β\",\"f\",\"v\",\"θ\", \"ð\", \"s\", \"z\", \"ʃ\", \"ʒ\",\"ʂ\",\"ç\", \"x\", \"ɣ\", \"χ\", \"ʁ\", \"h\"]\nconst affricate = [\"t͡s\", \"d͡z\", \"t͡ʃ\", \"d͡ʒ\", \"ʈ͡ʂ\", \"c͡ç\", \"ɟ͡ʝ\"]\nconst nasal = [\"m\", \"n\", \"ɳ\", \"ɲ\", \"ŋ\"]\nconst flap = [\"ɾ\", \"ɽ\"]\nconst trill = [\"r\"]\nconst lateral = [\"l\", \"ɭ\", \"ʎ\"]\nconst approximant = [\"w\", \"ɹ\", \"ɻ\", \"j\"]\nconst vowel = [\"i\",\"y\",\"ɨ\",\"ɯ\", \"u\", \"ɪ\", \"ʊ\", \"e\", \"o\", \"ə\", \"ɛ\", \"ʌ\", \"ɔ\", \"æ\",\"a\", \"ɑ\"]\n\nexport const keyboard = stop.concat(fricative, affricate, nasal, flap, trill, lateral, approximant, vowel)\n\nconst sonority_dict = {\n    \"vowel\" : vowel,\n    \"glide\" : [\"j\", \"w\"],\n    \"liquid\" : [\"ɾ\", \"ɽ\", \"r\", \"l\", \"ɭ\", \"ʎ\", \"ɹ\", \"ɻ\"],\n    \"nasal\" : nasal,\n    \"obstuent\" : stop.concat(fricative, affricate),\n}\n\nconst segment_to_sonority = (function () {\n    const dict = {}\n    for (let i = 0; i < sonority.length; i++) {\n        let s = sonority[i]\n        let l = sonority_dict[s]\n        for (let seg of l){\n            dict[seg] = i\n        } \n    }\n    return dict\n})()\n\nexport function get_indexes(segment_list){\n    let res = []\n    for (let s of segment_list){\n        res.push(segment_to_sonority[s])\n    }\n    return res\n}\n\nexport function get_syllables(segment_list){\n    let res = []\n    for (let s of segment_list){\n        res.push(\"T\")\n    }\n    let indexes = get_indexes(segment_list)\n    let prev = -1\n    let i = 0\n    let rise = false\n    let rise_idx = -1\n    // get nucleus\n    while (i < indexes.length){\n        let next = i + 1 < indexes.length ? indexes[i + 1] : -1\n        \n        let idx = indexes[i]\n        if (idx > next && idx > prev){\n            if (segment_list[i] == \"j\" || segment_list[i] == \"w\"){\n                return \"Invalid Input. Glides are never syllabic in any language.\"\n            }\n            res[i] = \"N\"\n        }\n        else if(idx > prev && idx === next){\n            rise = true\n            rise_idx = i \n        }\n        else if(rise && idx > next){\n            rise_idx = rise_idx != -1 ? rise_idx : 0\n            for (let j = rise_idx; j < i + 1; j++){\n                if (segment_list[i] == \"j\" || segment_list[i] == \"w\"){\n                    return \"Invalid Input. Glides are never syllabic in any language.\"\n                }\n                res[j] = \"N\"\n            }\n        }\n\n        if (idx != next){\n            rise = false\n        }\n        prev = indexes[i]\n        i += 1\n    }\n\n    \n    // get unknown\n    i = 0\n    let falling = false\n    let falling_id = -1\n    prev = -1\n    while (i < indexes.length){\n        let next = i + 1 < indexes.length ? indexes[i + 1] : -1\n        \n        let idx = indexes[i]\n        if (idx < next && idx < prev){\n            res[i] = \"?\"\n        }\n        else if(idx < prev && idx === next){\n            falling = true\n            falling_id = i \n        }\n        else if(idx > next){\n            falling = false\n        }\n        else if(falling && idx < next){\n            falling_id = falling_id != -1 ? falling_id : 0\n            for (let j = falling_id; j < i + 1; j++){\n                res[j] = \"?\"\n            }\n        }\n        prev = indexes[i]\n        i += 1\n    }\n\n    i = 0\n    let foundN = false\n    let lastSpecial = \"N\"\n    // get onset\n    while(i < indexes.length){\n        if (res[i] === \"N\"){\n            lastSpecial = \"N\"\n            foundN = true\n            i += 1\n            continue\n        }else if (res[i] === \"?\"){\n            lastSpecial = \"?\"\n            i += 1\n            continue \n        }\n\n        if (!foundN){\n            res[i] = \"O\"\n            i += 1\n            continue\n        }\n\n        if (lastSpecial == \"?\"){\n            res[i] = \"O\"\n            i += 1\n            continue\n        }\n\n        if (lastSpecial == \"N\"){\n            res[i] = \"C\"\n            i += 1\n            continue\n        }\n\n        i += 1\n    }\n\n    i = 0\n    while(i < indexes.length){\n        let next = i + 1 < indexes.length ? res[i + 1] : null\n        if (next === \"N\" && res[i] === \"?\"){\n            res[i] = \"O\"\n        }\n        i += 1\n    }\n\n    let j = indexes.length - 1\n    while(j >= 0){\n        if (res[j] == \"N\"){\n            break\n        }\n        res[j] = \"C\"\n        j -= 1\n    }\n\n    return res\n}","import './keyboard.css';\n\nimport React from 'react';\nimport { keyboard } from './checker';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nconst COLUMNS = 12;\n\nexport class Keyboard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.rows = [];\n        let i = 0;\n        while (i < keyboard.length) {\n            this.rows.push(keyboard.slice(i, Math.min(i + COLUMNS, keyboard.length)));\n            i += COLUMNS;\n        }\n    }\n\n    onKeyboardClick(text) {\n        this.props.onKeyClicked(text);\n    }\n\n    render() {\n        return (\n        <Paper elevation=\"2\" style={{\"width\": \"600px\", \"marginTop\": \"50px\", \"backgroundColor\": \"#323542\"}}>\n                <table style={{\"width\": \"100%\", \"padding\": \"15px\", \"tableLayout\": \"fixed\"}}>\n                <tbody>\n                {this.rows.map(row => {\n                    return (\n                    <tr>\n                    {row.map(item => {\n                        return (\n                            <th>\n                            <div className=\"keyboard-button\" onClick={() => this.onKeyboardClick(item)}>\n                                {item}\n                            </div>\n                            </th>\n                        )\n                    })}\n                    </tr>\n                    )\n                })}\n            </tbody>\n            </table>\n        </Paper>\n        )\n    }\n}\n","import './App.css';\n\nimport React from 'react';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport { Keyboard } from './keyboard';\nimport { keyboard, get_indexes, get_syllables } from './checker';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n// twɛlfθs spɹɪnt ɡɑɹdnz ɪkspɛnsɪv\n\nfunction linearMap(inRangeStart, inRangeEnd, outRangeStart, outRangeEnd, value) {\n\t\treturn outRangeStart + (value - inRangeStart) * (outRangeEnd - outRangeStart) / (inRangeEnd - inRangeStart);\n}\n\nconst MAX_CHARS_IN_IPA = 3;\n\nconst ipaSet = (() => {\n    const result = new Set();\n    keyboard.forEach(ipa => {result.add(ipa)});\n    return result;\n})()\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  }\n});\n\nclass AnalysisDescription extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            allowDiphthongs: false,\n        }\n    }\n\n    renderSplit(split) {\n        return (<p>\n                <span style={{fontWeight: 'bold', marginRight: '6px', color: \"#ffbc82\"}}>{split.length}</span>\n                {split.length == 1 ? 'syllable' : 'syllables'}:\n                <span style={{marginLeft: '20px'}}>[{split.join('.')}]</span>\n        </p>)\n    }\n\n    render() {\n        const data = this.props.data[this.state.allowDiphthongs ? 'withDiphthongs' : 'withoutDiphthongs'];\n\n        console.log(this.props.data)\n\n        return (<div style={{marginBottom: '35px'}}>\n            <div style={{fontWeight: 'bold', marginBottom: '10px'}}>\n                <FormControlLabel\n                    control={\n                    <Checkbox\n                        checked={this.state.allowDiphthongs}\n                        onChange={(e) => this.setState({allowDiphthongs: e.target.checked})}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                    />\n                    }\n                    label=\"Allow Diphthongs\"\n                />\n            </div>\n            {data.length == 1 ?\n             this.renderSplit(data[0]) :\n            (<div>\n                <div className=\"description-text\">\n                If all ambiguities are treated as onset:\n                </div>\n                {this.renderSplit(data[0])}\n                <div className=\"description-text\">\n                If all ambiguities are treated as coda:\n                </div>\n                {this.renderSplit(data[1])}\n                <div className=\"description-text\">\n                Other syllabifications are possible depending on how the ambiguities are interpreted.\n                </div>\n            </div>)\n            }\n        </div>);\n    }\n}\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: \"\",\n            showResults: false,\n            errorMessage: null,\n        };\n        this.parsedInputToDraw = null;\n    }\n\n    changeText(text) {\n        this.setState({ text: text });\n    }\n\n    onKeyboardClicked(text) {\n        this.setState({ text: this.state.text + text });\n    }\n\n    onSearch() {\n        const text = this.state.text;\n        this.setState({ showResults: true });\n\n        let inputValid = false;\n\n        const parsedInput = this.parseInput(text);\n\n        if (typeof parsedInput === \"string\") {\n            this.setState({ errorMessage: parsedInput });\n        } else {\n            this.setState({ errorMessage: null });\n            this.parsedInputToDraw = parsedInput;\n            this.analysisData = this.getAnalysisData(parsedInput);\n        }\n    }\n\n    getWithAmbiguityResolved(input, i, ambiguity) {\n        const s = input[i].syllable;\n        return s == '?' ? ambiguity : s;\n    }\n\n    getAnalysisData(input) {\n        const data = {};\n        for (let allowDiphthongs of [false, true]) {\n            const splits = [];\n            for (let ambiguity of ['O', 'C']) {\n                const split = [];\n                const nucleusList = [];\n                let lastNucleusStart = -1;\n                for (let i = 0; i < input.length; i++) {\n                    const {text, index, syllable} = input[i];\n                    if (!allowDiphthongs || syllable != 'N') {\n                        if (lastNucleusStart >= 0) {\n                            nucleusList.push([lastNucleusStart, i - 1]);\n                            lastNucleusStart = -1;\n                        }\n                    }\n                    if (syllable == 'N') {\n                        if (lastNucleusStart < 0) {\n                            lastNucleusStart = i;\n                        }\n                    }\n                }\n                if (lastNucleusStart >= 0) {\n                    nucleusList.push([lastNucleusStart, input.length - 1]);\n                }\n\n                for (let i = 0; i < nucleusList.length; i++) {\n                    let [start, end] = nucleusList[i];\n                    start--;\n                    end++;\n                    while (start >= 0 && this.getWithAmbiguityResolved(input, start, ambiguity) == 'O')\n                        start--;\n                    while (end < input.length && this.getWithAmbiguityResolved(input, end, ambiguity) == 'C')\n                        end++;\n                    start++;\n                    end--;\n                    split.push(input.slice(start, end + 1).map(item => item.text).join(''))\n                }\n                splits.push(split);\n            }\n            if (input.every(item => item.syllable != '?')) splits.pop();\n\n            data[allowDiphthongs ? 'withDiphthongs' : 'withoutDiphthongs'] = splits;\n        }\n        return data;\n    }\n\n    parseInput(text) {\n        const segments = [];\n        let i = 0;\n        while (i < text.length) {\n            let found = false;\n            for (let j = Math.min(MAX_CHARS_IN_IPA, text.length - i); j >= 1; --j) {\n                const slice = text.slice(i, i + j);\n                console.log(slice);\n                if (ipaSet.has(slice)) {\n                    segments.push(slice);\n                    i += j;\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return \"Invalid input. Please try again.\";\n            }\n        }\n        const indices = get_indexes(segments);\n        const syllables = get_syllables(segments);\n        if (typeof syllables === 'string') return syllables;\n        const result = [];\n        for (let i = 0; i < indices.length; i++) {\n            result.push({\n                text: segments[i],\n                index: indices[i],\n                syllable: syllables[i],\n            });\n        }\n        return result;\n    }\n\n    componentDidUpdate() {\n        if (!this.parsedInputToDraw) return;\n        const input = this.parsedInputToDraw;\n        this.parsedInputToDraw = null;\n\n        const canvas = this.refs.canvas;\n        if (!canvas) return;\n\n        const widthPerChar = 50;\n        const margin = [120, 30];\n        const yDrawRegion = [50, 170];\n        const labelY = 200;\n        const syllableToColor = {\n            \"O\": \"#00FF00\",\n            \"N\": \"#00feff\",\n            \"C\": \"#FF0000\",\n            \"?\": \"#FFFF00\",\n        }\n        const backgroundColor = \"#222327\"\n\n        const data = []\n        for (let i = 0; i < input.length; i++) {\n            const pointData = input[i];\n            const x = margin[0] + (i + 0.5) * widthPerChar;\n            const y = linearMap(4, 0, yDrawRegion[0], yDrawRegion[1], pointData.index);\n            const text = pointData.text;\n            const s = pointData.syllable;\n            data.push({x, y, text, s});\n        }\n\n        canvas.width = widthPerChar * input.length + margin[0] + margin[1];\n        canvas.height = 250;\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        ctx.strokeStyle = \"#666666\";\n        ctx.strokeRect(0, 0, canvas.width, canvas.height);\n\n        // y label\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = 'middle';\n        ctx.font = \"15px Arial\";\n        let x = null, y = null;\n        ctx.fillStyle = \"#ffffff\";\n        x = margin[0] / 2;\n        y = linearMap(4, 0, yDrawRegion[0], yDrawRegion[1], 0);\n        ctx.fillText(\"Obstruent\", x, y);\n        y = linearMap(4, 0, yDrawRegion[0], yDrawRegion[1], 1);\n        ctx.fillText(\"Nasal\", x, y);\n        y = linearMap(4, 0, yDrawRegion[0], yDrawRegion[1], 2);\n        ctx.fillText(\"Liquid\", x, y);\n        y = linearMap(4, 0, yDrawRegion[0], yDrawRegion[1], 3);\n        ctx.fillText(\"Glide\", x, y);\n        y = linearMap(4, 0, yDrawRegion[0], yDrawRegion[1], 4);\n        ctx.fillText(\"Vowel\", x, y);\n\n        ctx.beginPath();\n        ctx.strokeStyle = \"#ffffff\";\n        for (let i = 0; i < data.length; ++i) {\n            const {x, y} = data[i];\n            if (i == 0) {\n                ctx.moveTo(x, y);\n            } else {\n                ctx.lineTo(x, y);\n            }\n        }\n        ctx.stroke();\n\n        ctx.font = \"bold 15px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = 'middle';\n        const clearSize = 16;\n        for (let i = 0; i < data.length; ++i) {\n            const {x, y, s} = data[i];\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(x - clearSize / 2, y - clearSize / 2, clearSize, clearSize);\n            ctx.fillStyle = syllableToColor[s];\n            ctx.fillText(s, x, y);\n            // ctx.beginPath();\n            // ctx.arc(x, y, 5, 0, 2 * Math.PI);\n            // ctx.stroke();\n            // ctx.fill();\n        }\n\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = \"17px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = 'top';\n        for (let i = 0; i < data.length; ++i) {\n            const {x, y, text} = data[i];\n            ctx.fillText(text, x, labelY);\n\n            ctx.beginPath();\n            ctx.setLineDash([2, 8]);\n            ctx.moveTo(x, y + 10);\n            ctx.lineTo(x, labelY - 5);\n            ctx.stroke();\n        }\n    }\n\n    backToSearch() {\n        this.setState({ showResults: false });\n    }\n\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n            <div className=\"column-flex\">\n            <header className=\"App-header\">\n                <h1>\n                Syllable Analyzer\n                </h1>\n            </header>\n            {\n            this.state.showResults ?\n            <div className=\"column-flex\">\n                <div className=\"text-to-analyze\">\n                    [{this.state.text}]\n                </div>\n                {this.state.errorMessage ? <div className=\"invalid-input-error\">\n                    {this.state.errorMessage}\n                 </div> :\n                 (\n                    <>\n                    <canvas ref=\"canvas\" width={300} height={300} className=\"canvas\"/>\n                         <AnalysisDescription data={this.analysisData}></AnalysisDescription>\n                    </>\n                 )\n                }\n                <Button variant=\"contained\"\n                    onClick={() => {this.backToSearch()}}>\n                    Back\n                </Button>\n            </div>\n            :\n            <div className=\"column-flex\">\n            <div className=\"search-bar-container\">\n                <TextField className=\"search-bar\" label=\"Enter transcription in IPA\" variant=\"outlined\"\n                value={this.state.text}\n                onKeyPress={(e) => {if (e.charCode === 13) this.onSearch()}}\n                onChange={(e) => {this.changeText(e.target.value)}}/>\n            <Button variant=\"contained\" style={{\"marginLeft\": \"10px\", \"height\": \"50px\"}}\n                disabled={!this.state.text}\n                onClick={() => {this.onSearch()}}>\n                <ArrowForwardIcon />\n            </Button>\n            </div>\n            <Keyboard onKeyClicked={(e) => {this.onKeyboardClicked(e)}}>\n            </Keyboard>\n            </div>\n            }\n            </div>\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}